precision highp float;

attribute vec3 a_spos;
attribute vec2 a_time;
attribute vec2 a_texCoord;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 MMatrix;

uniform vec3 a;
uniform vec3 vel;

uniform vec3 ucolor;
uniform vec3 utime;
uniform vec2 nrframe;

varying highp vec2 vTexCoord;
varying highp vec3 vColor;

void main() {
	vec4 pos;
	float time = utime.x;
	float frame = utime.y;
	
	if (time < a_time.x || time > a_time.y) {
		pos = vec4(1000.0, 0.0, 0.0, 1.0);
		vColor = vec3(0.0, 0.0, 0.0);
	}
	else {
		pos = vec4(a_spos, 1.0);
		
		mat4 mv = view * MMatrix;
		float dtime = time - a_time.x;
		vec3 d;
		vec3 tmp = vel;
		
		d = tmp * dtime + a * dtime * dtime / 2.0;
		d = mat3(mv) * d;
		
		vec3 v;
		v = tmp + a * dtime;
		v = mat3(mv) * v;
		v = normalize(v);
		
		vec3 k = vec3(0.0, 0.0, 1.0);
		vec3 i = cross(v, k);
		k = cross(i, v);
		
		mv[0] = vec4(i, 0.0);
		mv[1] = vec4(v, 0.0);
		mv[2] = vec4(k, 0.0);
		
		pos = mv * pos;
		pos += vec4(d, 0.0);
		pos = projection * pos;
		
		vColor = ucolor;
		
		//Compute Texture Coordinate
		float nx, ny;
		ny = floor(frame / nrframe.x);
		nx = frame - ny * nrframe.x;
		ny = mod(ny, nrframe.y);
		vTexCoord.x = (nx + a_texCoord.x) / nrframe.x;
		vTexCoord.y = (ny + a_texCoord.y) / nrframe.y;
	}
	gl_Position = pos;
}