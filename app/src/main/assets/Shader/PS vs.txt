precision highp float;

attribute vec3 a_spos;
attribute vec2 a_time;
attribute vec3 a_v;
attribute vec2 a_texCoord;

uniform mat4 view;
uniform mat4 projection;
uniform mat4 MMatrix;

uniform vec3 utime;
uniform vec3 a;
uniform vec3 v;
uniform float swap;

varying highp vec2 vTexCoord;
varying highp float vI;

void main() {
	vec4 pos;
	float time = utime.x;
	
	if (swap != 0.0) {
		vI = 1.0;
		vTexCoord = a_texCoord;
		if (time > a_time.y)
			pos = vec4(1000.0, 0.0, 0.0, 1.0);
		
		mat4 mv = view * MMatrix;
		vec3 d = v * time + a * time * time / 2.0;
		d = mat3(mv) * d;
		
		//Billboarding
		mv[0] = vec4(1.0, 0.0, 0.0, 0.0);
		mv[1] = vec4(0.0, 1.0, 0.0, 0.0);
		mv[2] = vec4(0.0, 0.0, 1.0, 0.0);
		
		pos = vec4(a_spos, 1.0);
		pos = mv * pos;
		pos += vec4(d, 0.0);
		pos = projection * pos;
		gl_Position = pos;
		return;
	}
	
	if (time <  a_time.x || time > a_time.y) {
		pos = vec4(1000.0, 0.0, 0.0, 1.0);
	}
	else {
		float t = a_time.x;
		vec3 d1 = v * t + a * t * t / 2.0;
		vec3 tmpv = v + a * t; // velocity of group
	
		vec3 Ox, Oy, Oz;
		Oz = vec3(0.0, 0.0, 1.0);
		Ox = cross(tmpv, Oz);
		Ox = normalize(Ox);
		Oy = normalize(tmpv);
		Oz = cross(Ox, Oy);
		
		float dt = time - a_time.x;
		float u = dt / (a_time.y - a_time.x);
		vI = clamp(-1.6 * u * u + 0.6 * u + 1.0, 0.0, 1.0);
		
		mat4 mv = view * MMatrix;
		
		// velocity of current object
		tmpv = a_v.x * Ox + a_v.y * Oy + a_v.z * Oz; 
		vec3 d2 = d1 + tmpv * dt + a * dt * dt / 2.0;
		//Position of current object
		d2 = mat3(mv) * d2;
		
		//Billboarding
		mv[0] = vec4(1.0, 0.0, 0.0, 0.0);
		mv[1] = vec4(0.0, 1.0, 0.0, 0.0);
		mv[2] = vec4(0.0, 0.0, 1.0, 0.0);
		
		pos =  vec4(a_spos, 1.0);
		pos = mv * pos;
		pos += vec4(d2, 0.0);
		pos = projection * pos;
		vTexCoord = a_texCoord;
	}
	
	gl_Position = pos;
}