precision highp float;

attribute vec3 a_position;
attribute vec3 a_normal;
attribute vec2 a_texCoord;

uniform vec3 lightAmbient;
uniform vec3 lightDiffuse;
uniform vec3 lightSpecular;

uniform vec3 lightPos;
uniform vec3 viewPos;//used for specular

uniform mat4 View;
uniform mat4 Projection;
uniform mat4 MMatrix;

varying highp vec3 color;
varying mediump vec2 vTexCoord;

vec3 diffColor(in vec3 diff, in vec3 lightDir, in vec3 normal) {
	float i = dot(lightDir, normal);
	i = clamp(i, 0.0, 1.0);
	return i * diff;
}

vec3 specColor(in vec3 spec, in vec3 lightDir, in vec3 viewDir, in vec3 normal) {
	float intensity = dot(normal, normalize(viewDir + lightDir));
	intensity = clamp(intensity, 0.0, 1.0);
	intensity = pow(intensity, 50.0);
	return intensity * spec;
}

void main() {
	vec4 pos = vec4(a_position, 1.0);
	vec3 currPos;
	
	pos = MMatrix * pos;
	currPos = vec3(pos);
	
	pos = View * pos;
	pos = Projection * pos;
	
	vec3 normal = mat3(MMatrix) * a_normal;
	
	vec3 lightDirection = normalize(lightPos - currPos);
	vec3 viewDirection = normalize(viewPos - currPos);
	
	color = lightAmbient;
	color += diffColor(lightDiffuse, lightDirection, normal);
	color += specColor(lightSpecular, lightDirection, viewDirection, normal);
	
	color = clamp(color, 0.0, 1.0);
	
	vTexCoord = a_texCoord;
	gl_Position = pos;
}